// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TNS.PERSISTENCE;

#nullable disable

namespace TNS.PERSISTENCE.Migrations
{
    [DbContext(typeof(TNSDbContext))]
    [Migration("20240613180844_initialize")]
    partial class initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.CRM_requestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ClosingDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceProvidedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeOfProblem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceProvidedId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("CRM_Requests");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("baae4bab-000d-4508-96c5-d5a355279eb0"),
                            Name = "Интернет"
                        },
                        new
                        {
                            Id = new Guid("ffe400f7-068f-4fa9-98d1-4b24b613baf5"),
                            Name = "Мобильная связь"
                        },
                        new
                        {
                            Id = new Guid("a3a96f13-0167-44b2-9ed1-0e4d2cdbe54d"),
                            Name = "Телевидение"
                        },
                        new
                        {
                            Id = new Guid("46a6b6f2-c71e-4057-9ed3-09d5cd7bd964"),
                            Name = "Видеонаблюдение"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceProvided");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce46f275-60a2-4369-873f-6ecf3ed42f26"),
                            Name = "Подключение"
                        },
                        new
                        {
                            Id = new Guid("28d8b7d0-d667-4ddf-b8c6-98f620df1a95"),
                            Name = "Управление договором/контактными данными"
                        },
                        new
                        {
                            Id = new Guid("394e0598-a74f-4cf0-80f4-4b8018b6caf9"),
                            Name = "Диагностика и настройка оборудования/подключения"
                        },
                        new
                        {
                            Id = new Guid("3de0f547-a34d-4d08-99b4-23dca8391d23"),
                            Name = "Оплата услуг"
                        },
                        new
                        {
                            Id = new Guid("f6a636a3-2d9a-483e-bb24-d957f8c51c11"),
                            Name = "Управление тарифом/услугой"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2813eab-c234-4a86-9572-4fa5853b0022"),
                            Name = "Подключение услуг с новой инфраструктурой"
                        },
                        new
                        {
                            Id = new Guid("9cf0a224-1b1f-413a-8e09-4ab469eb0dfb"),
                            Name = "Подключение услуг на существующей инфраструктуре"
                        },
                        new
                        {
                            Id = new Guid("3b812b26-3a88-4971-8a7f-1b88c2bfeec7"),
                            Name = "Изменение условий договора"
                        },
                        new
                        {
                            Id = new Guid("742dd3c2-31e0-4948-8b18-7b028364d2c3"),
                            Name = "Включение в договор дополнительной услуги"
                        },
                        new
                        {
                            Id = new Guid("048e7593-97f0-488d-9819-3b0b3e0e9a20"),
                            Name = "Изменение контактных данных"
                        },
                        new
                        {
                            Id = new Guid("d9935308-9a88-41f5-887f-d3c8848707a6"),
                            Name = "Изменение тарифа"
                        },
                        new
                        {
                            Id = new Guid("91301712-fea9-459a-834b-8decfb81fb7e"),
                            Name = "Изменение адреса предоставления услуг"
                        },
                        new
                        {
                            Id = new Guid("98935bd1-da2c-4eaf-9029-01f640910277"),
                            Name = "Отключение услуги"
                        },
                        new
                        {
                            Id = new Guid("f8cac35b-1ca5-4ceb-ade9-1f89f8f90010"),
                            Name = "Приостановка предоставления услуги"
                        },
                        new
                        {
                            Id = new Guid("173ceffb-0b6b-4d17-9443-271523578a76"),
                            Name = "Нет доступа к услуге"
                        },
                        new
                        {
                            Id = new Guid("8c1ebe26-5b4b-42d6-9744-c4d5f5422167"),
                            Name = "Разрыв соединения"
                        },
                        new
                        {
                            Id = new Guid("84766db7-fafe-4856-8bb9-4356c752c7a1"),
                            Name = "Низкая скорость соединения"
                        },
                        new
                        {
                            Id = new Guid("4c03f2d2-7661-4b56-97ff-7e1c53b4568e"),
                            Name = "Выписка по платежам"
                        },
                        new
                        {
                            Id = new Guid("b8df5708-17df-4381-b330-7070e8504294"),
                            Name = "Информация о платежах"
                        },
                        new
                        {
                            Id = new Guid("1729071b-88d9-456d-bc80-4d29fd0fa7dd"),
                            Name = "Получение квитанции на оплату услуги"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6b96d54-45ad-4a20-898f-74cd2f6ea11d"),
                            DateOfBirth = new DateOnly(2003, 12, 12),
                            Email = "yayaya@ya.ru",
                            FullName = "Вячеслав Александрович Мордник",
                            Login = "+79152145252",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            PhotoId = "SorsePhoto\\ProfilePhoto3.jpg",
                            Telegram = ""
                        },
                        new
                        {
                            Id = new Guid("e01cd101-4535-4b2d-9766-74ee7fea637b"),
                            DateOfBirth = new DateOnly(2003, 12, 12),
                            Email = "yayaya@ya.ru",
                            FullName = "Вячеслава Админовична Главных",
                            Login = "+79152145253",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            PhotoId = "SorsePhoto\\ProfilePhoto1.jpg",
                            Telegram = ""
                        },
                        new
                        {
                            Id = new Guid("9d4166a8-5efa-4e40-bda7-e2d0000091c0"),
                            DateOfBirth = new DateOnly(2003, 12, 12),
                            Email = "yayaya@ya.ru",
                            FullName = "Ангелина Инженеровна Техническая",
                            Login = "+79152145254",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            PhotoId = "SorsePhoto\\ProfilePhoto2.jpg",
                            Telegram = ""
                        },
                        new
                        {
                            Id = new Guid("173eb815-fd0d-43eb-a3cf-7c3ce671ce16"),
                            DateOfBirth = new DateOnly(2003, 12, 12),
                            Email = "yayaya@ya.ru",
                            FullName = "Анастасия Игоревна Саппортина",
                            Login = "+79152145255",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            PhotoId = "SorsePhoto\\ProfilePhoto3.jpg",
                            Telegram = ""
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeRoleEntity", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoleEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e2b526a-caf3-48c7-8ab1-f1e3855b77b6"),
                            Date = new DateOnly(2024, 6, 13),
                            Description = "Планерка",
                            Time = new TimeOnly(9, 15, 0)
                        },
                        new
                        {
                            Id = new Guid("f805297f-f3a8-4cf8-b9fd-95cf02503584"),
                            Date = new DateOnly(2024, 6, 13),
                            Description = "Обед",
                            Time = new TimeOnly(12, 15, 0)
                        },
                        new
                        {
                            Id = new Guid("4d9139fc-e491-4477-bf6e-8dc600f2b97e"),
                            Date = new DateOnly(2024, 6, 13),
                            Description = "Митинг",
                            Time = new TimeOnly(16, 15, 0)
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventRoleEntity", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EventRoleEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Write"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Boss"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Support"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BaseStationAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("660bea47-cda6-4ee7-a044-1df5305bf360"),
                            Address = "Коломна, Кронверкский пр., д. 5",
                            Location = "Учебный корпус Колледж Коломна, здание рядом с мечетью"
                        },
                        new
                        {
                            Id = new Guid("c2c3ffce-e82c-47c6-8c8a-f76fa3b12aa6"),
                            Address = "Коломна, ул. Блохина, д. 9",
                            Location = "Гостинница Советская, в центре города"
                        },
                        new
                        {
                            Id = new Guid("122581f5-b3ed-4d5c-b7bc-9e7a9507d386"),
                            Address = "Коломна, Александровский парк, д. 7",
                            Location = "Военно-исторический музей артиллерии, инженерных войск и войск связи"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("BaseStationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommunicationProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("Handover")
                        .HasColumnType("integer");

                    b.Property<double>("S")
                        .HasColumnType("double precision");

                    b.Property<string>("TypeAntenna")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("BaseStations");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.EquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttenuationCoefficient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DTT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Frequency")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03109b32-9650-4551-bfa5-e94248aba625"),
                            Address = "Коломна, Депутатская ул., д. 8",
                            AttenuationCoefficient = "10.5",
                            DTT = "ADSL",
                            Frequency = 45.5,
                            Name = "Транспондер",
                            SerialNumber = "АО567-ТНС-24"
                        },
                        new
                        {
                            Id = new Guid("dadf153a-09d6-49e9-ac35-50d5c4d279dc"),
                            Address = "Коломна, Депутатская ул., д. 8",
                            AttenuationCoefficient = "12.5",
                            DTT = "SHDSL",
                            Frequency = 50.200000000000003,
                            Name = "Агрегирующий транспондер",
                            SerialNumber = "АО500-ТНС-24"
                        },
                        new
                        {
                            Id = new Guid("0e82f982-aeb3-4899-ba87-8f2f26a1ef86"),
                            Address = "Коломна, Депутатская ул., д. 8",
                            AttenuationCoefficient = "25.5",
                            DTT = "Optical Fiber",
                            Frequency = 10.5,
                            Name = "Оптические волоконные усилители",
                            SerialNumber = "АО599-ТНС-24"
                        },
                        new
                        {
                            Id = new Guid("d635f4e4-2dd7-430b-88bb-33bd777ac423"),
                            Address = "Коломна, Депутатская ул., д. 8",
                            AttenuationCoefficient = "0.5",
                            DTT = "5G",
                            Frequency = 235.5,
                            Name = "ИРТЫШ",
                            SerialNumber = "АО999-ТНС-24"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Passport", "TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity.Passport#Passport", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("DateOfIssueOfPassport")
                                .HasColumnType("date")
                                .HasColumnName("DateOfIssuePassport");

                            b1.Property<string>("DivisionCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("DivisionCode");

                            b1.Property<string>("IssuedBy")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("IssuedBy");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("Number");

                            b1.Property<string>("ResidenceAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResidenceAddress");

                            b1.Property<string>("ResidentialAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResidentialAddress");

                            b1.Property<int>("Series")
                                .HasColumnType("integer")
                                .HasColumnName("Series");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ContractType")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("DateOfContractConclusion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfTerminationOfTheContract")
                        .HasColumnType("date");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<long>("PersonalBill")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasonForTerminationOfContract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubscriberNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOfEquipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f51ccd49-e507-45a9-95ef-0a2119832276"),
                            ContractNumber = "50-785493417-KOLOMNA-11-2018",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2018, 11, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493417L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493417-KOLOMNA",
                            TypeOfEquipment = "Маршрутизатор"
                        },
                        new
                        {
                            Id = new Guid("272882da-b0a5-469a-adae-53a397c4ea51"),
                            ContractNumber = "50-785493418-KOLOMNA-12-2019",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2019, 12, 10),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493418L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493418-KOLOMNA",
                            TypeOfEquipment = "Маршрутизатор"
                        },
                        new
                        {
                            Id = new Guid("fafb5279-9cad-4d7e-aaa8-11cba9524f53"),
                            ContractNumber = "50-785493419-KOLOMNA-11-2014",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2014, 11, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493419L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493419-KOLOMNA",
                            TypeOfEquipment = "Коммутатор"
                        },
                        new
                        {
                            Id = new Guid("0320d090-d3a3-477c-b283-dc7b3484eeb1"),
                            ContractNumber = "50-785493420-KOLOMNA-11-2014",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2014, 11, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493420L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493420-KOLOMNA",
                            TypeOfEquipment = "Сервер"
                        },
                        new
                        {
                            Id = new Guid("fcee4a72-067a-46b2-aa72-41a21f88d2af"),
                            ContractNumber = "50-785493421-KOLOMNA-06-2015",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2015, 6, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2023, 5, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493421L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493421-KOLOMNA",
                            TypeOfEquipment = "Шлюз"
                        },
                        new
                        {
                            Id = new Guid("d069c6d3-6014-4d3a-9675-e3b8570c91d2"),
                            ContractNumber = "50-785493422-KOLOMNA-07-2013",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2013, 7, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493422L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493422-KOLOMNA",
                            TypeOfEquipment = "Модем"
                        },
                        new
                        {
                            Id = new Guid("565f79c2-451a-49d0-8925-b0b8cf294c27"),
                            ContractNumber = "50-785493423-KOLOMNA-03-2010",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2010, 3, 27),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493423L,
                            ReasonForTerminationOfContract = "Финансовые трудности",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493423-KOLOMNA",
                            TypeOfEquipment = "Телефон"
                        },
                        new
                        {
                            Id = new Guid("3861813a-45aa-471d-b4b3-6485f3b03610"),
                            ContractNumber = "50-785493424-KOLOMNA-01-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 1, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2024, 1, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Нарушение условий договора",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Ноутбук"
                        },
                        new
                        {
                            Id = new Guid("ab635843-dc9d-43d2-83db-c8c87fdc23df"),
                            ContractNumber = "50-785493424-KOLOMNA-01-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 1, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Планшет"
                        },
                        new
                        {
                            Id = new Guid("bd4c1411-f376-4ffd-8966-0a1e4238241f"),
                            ContractNumber = "50-785493424-KOLOMNA-05-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 5, 11),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Телевидение",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Ноутбук"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.CRM_requestEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", "Service")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", "ServiceProvided")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceProvidedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", "ServiceType")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", "Subscriber")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServiceProvided");

                    b.Navigation("ServiceType");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeRoleEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventRoleEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RolePermissionEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", "Address")
                        .WithMany("BaseStations")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", "Subscriber")
                        .WithOne("Person")
                        .HasForeignKey("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", "SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", b =>
                {
                    b.Navigation("BaseStations");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");

                    b.Navigation("Person")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
