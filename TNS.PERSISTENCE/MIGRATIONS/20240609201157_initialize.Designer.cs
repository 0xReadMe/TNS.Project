// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TNS.PERSISTENCE;

#nullable disable

namespace TNS.PERSISTENCE.Migrations
{
    [DbContext(typeof(TNSDbContext))]
    [Migration("20240609201157_initialize")]
    partial class initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmployeePositionEntityEventEntity", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("employeePositionsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventsId", "employeePositionsId");

                    b.HasIndex("employeePositionsId");

                    b.ToTable("EmployeePositionEntityEventEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.BaseStationAddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BaseStationAddresses");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.BaseStationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("BaseStationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommunicationProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("Handover")
                        .HasColumnType("integer");

                    b.Property<double>("S")
                        .HasColumnType("double precision");

                    b.Property<string>("TypeAntenna")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("BaseStations");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM_requestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ClosingDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceProvidedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeOfProblem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceProvidedId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("CRM_Requests");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EmployeePositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttenuationCoefficient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DTT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Frequency")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Passport", "TNS.PERSISTENCE.ENTITIES.PersonEntity.Passport#Passport", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("DateOfIssueOfPassport")
                                .HasColumnType("date")
                                .HasColumnName("DateOfIssuePassport");

                            b1.Property<string>("DivisionCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("DivisionCode");

                            b1.Property<string>("IssuedBy")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("IssuedBy");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("Number");

                            b1.Property<string>("ResidenceAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResidenceAddress");

                            b1.Property<string>("ResidentialAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResidentialAddress");

                            b1.Property<int>("Series")
                                .HasColumnType("integer")
                                .HasColumnName("Series");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.ServiceProvidedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceProvided");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.ServiceTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SubscriberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ContractType")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("DateOfContractConclusion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfTerminationOfTheContract")
                        .HasColumnType("date");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<long>("PersonalBill")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasonForTerminationOfContract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubscriberNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOfEquipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("EmployeePositionEntityEventEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EmployeePositionEntity", null)
                        .WithMany()
                        .HasForeignKey("employeePositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.BaseStationEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.BaseStationAddressEntity", "Address")
                        .WithMany("BaseStations")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM_requestEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.ServiceEntity", "Service")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.ServiceProvidedEntity", "ServiceProvided")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceProvidedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.ServiceTypeEntity", "ServiceType")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.SubscriberEntity", "Subscriber")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServiceProvided");

                    b.Navigation("ServiceType");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EmployeeEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EmployeePositionEntity", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.PersonEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.SubscriberEntity", "Subscriber")
                        .WithOne("Person")
                        .HasForeignKey("TNS.PERSISTENCE.ENTITIES.PersonEntity", "SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.BaseStationAddressEntity", b =>
                {
                    b.Navigation("BaseStations");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EmployeePositionEntity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.ServiceEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.ServiceProvidedEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.ServiceTypeEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SubscriberEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");

                    b.Navigation("Person")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
