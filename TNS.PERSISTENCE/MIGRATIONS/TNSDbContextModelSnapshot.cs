// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TNS.PERSISTENCE;

#nullable disable

namespace TNS.PERSISTENCE.Migrations
{
    [DbContext(typeof(TNSDbContext))]
    partial class TNSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.CRM_requestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ClosingDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceProvidedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeOfProblem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceProvidedId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("CRM_Requests");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("707bcafd-2dae-4548-9eb1-e9e9f0ae6d29"),
                            Name = "Интернет"
                        },
                        new
                        {
                            Id = new Guid("b01114f6-dfd8-43a9-8585-a8e88ba85b89"),
                            Name = "Мобильная связь"
                        },
                        new
                        {
                            Id = new Guid("fab1b894-fcac-434d-b0f8-daba7955264d"),
                            Name = "Телевидение"
                        },
                        new
                        {
                            Id = new Guid("c32e6896-0932-450e-a5a9-d94e6eb68eb5"),
                            Name = "Видеонаблюдение"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceProvided");

                    b.HasData(
                        new
                        {
                            Id = new Guid("770716ae-faab-4ba6-b253-005b797e30df"),
                            Name = "Подключение"
                        },
                        new
                        {
                            Id = new Guid("7c75e8b2-6f35-4915-b742-57abea58b0d5"),
                            Name = "Управление договором/контактными данными"
                        },
                        new
                        {
                            Id = new Guid("55f827c5-6f23-44d2-8bcb-c9b0144dd232"),
                            Name = "Диагностика и настройка оборудования/подключения"
                        },
                        new
                        {
                            Id = new Guid("5afc7580-de8b-46cc-8313-ab693d57b1ed"),
                            Name = "Оплата услуг"
                        },
                        new
                        {
                            Id = new Guid("fb57e7b8-86ea-4f0a-94cb-97078b69b2f6"),
                            Name = "Управление тарифом/услугой"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbcc7b3b-eb7a-43c3-9232-4d9d89dae9ce"),
                            Name = "Подключение услуг с новой инфраструктурой"
                        },
                        new
                        {
                            Id = new Guid("be67f6d1-57de-4004-8135-d0ef610f4ea5"),
                            Name = "Подключение услуг на существующей инфраструктуре"
                        },
                        new
                        {
                            Id = new Guid("e413fbcf-50e3-41c1-b4d7-b124daf2c7e2"),
                            Name = "Изменение условий договора"
                        },
                        new
                        {
                            Id = new Guid("349c682d-29ee-486c-998a-9a3da0c67688"),
                            Name = "Включение в договор дополнительной услуги"
                        },
                        new
                        {
                            Id = new Guid("bcb77237-d356-46fb-8f47-82e30146abed"),
                            Name = "Изменение контактных данных"
                        },
                        new
                        {
                            Id = new Guid("88b99cc1-9c86-4bc6-93de-3012b2871f7a"),
                            Name = "Изменение тарифа"
                        },
                        new
                        {
                            Id = new Guid("c8c2a0f5-483c-4fda-bee8-9aa98d47be75"),
                            Name = "Изменение адреса предоставления услуг"
                        },
                        new
                        {
                            Id = new Guid("8f8702d9-3944-48ee-be10-41bb5a45e8ec"),
                            Name = "Отключение услуги"
                        },
                        new
                        {
                            Id = new Guid("fb04ebb4-4a7f-418b-977b-0962e66886ad"),
                            Name = "Приостановка предоставления услуги"
                        },
                        new
                        {
                            Id = new Guid("f2ff5f07-ab6d-4395-af43-feb0ec121783"),
                            Name = "Нет доступа к услуге"
                        },
                        new
                        {
                            Id = new Guid("5104e9d3-1290-44bd-ba5f-47b7860096f8"),
                            Name = "Разрыв соединения"
                        },
                        new
                        {
                            Id = new Guid("24a6d24c-2503-4562-956c-fa8dcda6d81e"),
                            Name = "Низкая скорость соединения"
                        },
                        new
                        {
                            Id = new Guid("f10a5c7e-f51f-4d17-8165-d24f879e4b9e"),
                            Name = "Выписка по платежам"
                        },
                        new
                        {
                            Id = new Guid("f718d578-5358-4167-ad41-29b88261aa17"),
                            Name = "Информация о платежах"
                        },
                        new
                        {
                            Id = new Guid("b59878dc-85bf-4a9f-a9ba-62d17f54ebfb"),
                            Name = "Получение квитанции на оплату услуги"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfcc7c0e-a779-4e8f-806c-d439436a636e"),
                            DateOfBirth = new DateOnly(2003, 12, 12),
                            Email = "yayaya@ya.ru",
                            FullName = "Вячеслав Александрович Мордник",
                            Login = "+79152145252",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            PhotoId = "SorsePhoto\\ProfilePhoto3.jpg",
                            Telegram = ""
                        },
                        new
                        {
                            Id = new Guid("a470a7af-efe1-4a94-b4a9-7929fbf2c800"),
                            DateOfBirth = new DateOnly(2003, 12, 12),
                            Email = "yayaya@ya.ru",
                            FullName = "Вячеслава Админовична Главных",
                            Login = "+79152145253",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            PhotoId = "SorsePhoto\\ProfilePhoto1.jpg",
                            Telegram = ""
                        },
                        new
                        {
                            Id = new Guid("d2d86ee5-698c-412e-b083-5369dcb04195"),
                            DateOfBirth = new DateOnly(2003, 12, 12),
                            Email = "yayaya@ya.ru",
                            FullName = "Ангелина Инженеровна Техническая",
                            Login = "+79152145254",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            PhotoId = "SorsePhoto\\ProfilePhoto2.jpg",
                            Telegram = ""
                        },
                        new
                        {
                            Id = new Guid("47d97bc9-d872-4c0b-862f-f74c50949d95"),
                            DateOfBirth = new DateOnly(2003, 12, 12),
                            Email = "yayaya@ya.ru",
                            FullName = "Анастасия Игоревна Саппортина",
                            Login = "+79152145255",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            PhotoId = "SorsePhoto\\ProfilePhoto3.jpg",
                            Telegram = ""
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeRoleEntity", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoleEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3ca49fe-476e-4415-88f7-d85dd75a269c"),
                            Date = new DateOnly(2024, 6, 14),
                            Description = "Планерка",
                            Time = new TimeOnly(9, 15, 0)
                        },
                        new
                        {
                            Id = new Guid("2bb4a17c-03a7-4e5d-a463-04c321cee8b0"),
                            Date = new DateOnly(2024, 6, 14),
                            Description = "Обед",
                            Time = new TimeOnly(12, 15, 0)
                        },
                        new
                        {
                            Id = new Guid("8d3e588c-45a7-4215-952e-20d6fc17bb9d"),
                            Date = new DateOnly(2024, 6, 14),
                            Description = "Митинг",
                            Time = new TimeOnly(16, 15, 0)
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventRoleEntity", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EventRoleEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Write"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Boss"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Support"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BaseStationAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd6beaf0-979a-412a-ab16-987428691ea1"),
                            Address = "Коломна, Кронверкский пр., д. 5",
                            Location = "Учебный корпус Колледж Коломна, здание рядом с мечетью"
                        },
                        new
                        {
                            Id = new Guid("7700afab-9bbb-4e26-beca-669041206973"),
                            Address = "Коломна, ул. Блохина, д. 9",
                            Location = "Гостинница Советская, в центре города"
                        },
                        new
                        {
                            Id = new Guid("f69caf17-3674-4714-804e-c6aa5816f3d4"),
                            Address = "Коломна, Александровский парк, д. 7",
                            Location = "Военно-исторический музей артиллерии, инженерных войск и войск связи"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("BaseStationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommunicationProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("Handover")
                        .HasColumnType("integer");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("boolean");

                    b.Property<double>("S")
                        .HasColumnType("double precision");

                    b.Property<string>("TypeAntenna")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("BaseStations");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.EquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttenuationCoefficient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DTT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Frequency")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5523e143-30d3-4d02-89b1-f617a78ba53c"),
                            Address = "Коломна, Депутатская ул., д. 8",
                            AttenuationCoefficient = "10.5",
                            DTT = "ADSL",
                            Frequency = 45.5,
                            IsWorking = true,
                            Name = "Транспондер",
                            SerialNumber = "АО567-ТНС-24"
                        },
                        new
                        {
                            Id = new Guid("3521fc29-a257-44d7-9e1e-60fa48810029"),
                            Address = "Коломна, Депутатская ул., д. 8",
                            AttenuationCoefficient = "12.5",
                            DTT = "SHDSL",
                            Frequency = 50.200000000000003,
                            IsWorking = true,
                            Name = "Агрегирующий транспондер",
                            SerialNumber = "АО500-ТНС-24"
                        },
                        new
                        {
                            Id = new Guid("25fa5e47-cccf-4021-a8b0-9fedfb745180"),
                            Address = "Коломна, Депутатская ул., д. 8",
                            AttenuationCoefficient = "25.5",
                            DTT = "Optical Fiber",
                            Frequency = 10.5,
                            IsWorking = true,
                            Name = "Оптические волоконные усилители",
                            SerialNumber = "АО599-ТНС-24"
                        },
                        new
                        {
                            Id = new Guid("7dc62c77-9fc3-4c10-83fe-9632659377f6"),
                            Address = "Коломна, Депутатская ул., д. 8",
                            AttenuationCoefficient = "0.5",
                            DTT = "5G",
                            Frequency = 235.5,
                            IsWorking = true,
                            Name = "ИРТЫШ",
                            SerialNumber = "АО999-ТНС-24"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Passport", "TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity.Passport#Passport", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("DateOfIssueOfPassport")
                                .HasColumnType("date")
                                .HasColumnName("DateOfIssuePassport");

                            b1.Property<string>("DivisionCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("DivisionCode");

                            b1.Property<string>("IssuedBy")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("IssuedBy");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("Number");

                            b1.Property<string>("ResidenceAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResidenceAddress");

                            b1.Property<string>("ResidentialAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResidentialAddress");

                            b1.Property<int>("Series")
                                .HasColumnType("integer")
                                .HasColumnName("Series");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ContractType")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("DateOfContractConclusion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfTerminationOfTheContract")
                        .HasColumnType("date");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<long>("PersonalBill")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasonForTerminationOfContract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubscriberNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOfEquipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5271e7df-fb9e-45af-a027-319d85f0f4bc"),
                            ContractNumber = "50-785493417-KOLOMNA-11-2018",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2018, 11, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493417L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493417-KOLOMNA",
                            TypeOfEquipment = "Маршрутизатор"
                        },
                        new
                        {
                            Id = new Guid("1337d42d-db5f-4d00-99f7-8736c2766093"),
                            ContractNumber = "50-785493418-KOLOMNA-12-2019",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2019, 12, 10),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493418L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493418-KOLOMNA",
                            TypeOfEquipment = "Маршрутизатор"
                        },
                        new
                        {
                            Id = new Guid("539d3153-599e-46d7-b188-2d7e7c96edf3"),
                            ContractNumber = "50-785493419-KOLOMNA-11-2014",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2014, 11, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493419L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493419-KOLOMNA",
                            TypeOfEquipment = "Коммутатор"
                        },
                        new
                        {
                            Id = new Guid("a3c6130c-6dda-47e6-94b2-3814c606f4e3"),
                            ContractNumber = "50-785493420-KOLOMNA-11-2014",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2014, 11, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493420L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493420-KOLOMNA",
                            TypeOfEquipment = "Сервер"
                        },
                        new
                        {
                            Id = new Guid("f088681a-7da2-4e29-8ef4-bf702ee5adc8"),
                            ContractNumber = "50-785493421-KOLOMNA-06-2015",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2015, 6, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2023, 5, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493421L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493421-KOLOMNA",
                            TypeOfEquipment = "Шлюз"
                        },
                        new
                        {
                            Id = new Guid("9bf4a621-2232-49fd-8658-ff9d4c090027"),
                            ContractNumber = "50-785493422-KOLOMNA-07-2013",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2013, 7, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493422L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493422-KOLOMNA",
                            TypeOfEquipment = "Модем"
                        },
                        new
                        {
                            Id = new Guid("29c2e5b6-f987-4e5b-b843-514ba1b35e47"),
                            ContractNumber = "50-785493423-KOLOMNA-03-2010",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2010, 3, 27),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493423L,
                            ReasonForTerminationOfContract = "Финансовые трудности",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493423-KOLOMNA",
                            TypeOfEquipment = "Телефон"
                        },
                        new
                        {
                            Id = new Guid("ffec7fb3-5e70-4f8a-98c2-1991125a5acd"),
                            ContractNumber = "50-785493424-KOLOMNA-01-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 1, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2024, 1, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Нарушение условий договора",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Ноутбук"
                        },
                        new
                        {
                            Id = new Guid("3435fb5d-978a-4262-a6d0-159bb1b1809c"),
                            ContractNumber = "50-785493424-KOLOMNA-01-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 1, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Планшет"
                        },
                        new
                        {
                            Id = new Guid("e821500f-2a79-41f6-bd70-f216e66255de"),
                            ContractNumber = "50-785493424-KOLOMNA-05-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 5, 11),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Телевидение",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Ноутбук"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.CRM_requestEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", "Service")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", "ServiceProvided")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceProvidedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", "ServiceType")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", "Subscriber")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServiceProvided");

                    b.Navigation("ServiceType");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeRoleEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventRoleEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RolePermissionEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", "Address")
                        .WithMany("BaseStations")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", "Subscriber")
                        .WithOne("Person")
                        .HasForeignKey("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", "SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", b =>
                {
                    b.Navigation("BaseStations");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");

                    b.Navigation("Person")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
