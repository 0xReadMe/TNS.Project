// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TNS.PERSISTENCE;

#nullable disable

namespace TNS.PERSISTENCE.Migrations
{
    [DbContext(typeof(TNSDbContext))]
    [Migration("20240612175444_initialize")]
    partial class initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmployeePositionEntityEventEntity", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("employeePositionsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventsId", "employeePositionsId");

                    b.HasIndex("employeePositionsId");

                    b.ToTable("EmployeePositionEntityEventEntity");
                });

            modelBuilder.Entity("EmployeePositionEntityRoleEntity", b =>
                {
                    b.Property<Guid>("EmployeePositionsId")
                        .HasColumnType("uuid");

                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.HasKey("EmployeePositionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("EmployeePositionEntityRoleEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.CRM_requestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ClosingDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceProvidedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeOfProblem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceProvidedId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("CRM_Requests");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceProvided");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeePositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeRoleEntity", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeId", "RoleId");

                    b.ToTable("EmployeeRoleEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Write"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Boss"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Support"
                        });
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RolePermissionEntity", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BaseStationAddresses");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("BaseStationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommunicationProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("Handover")
                        .HasColumnType("integer");

                    b.Property<double>("S")
                        .HasColumnType("double precision");

                    b.Property<string>("TypeAntenna")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("BaseStations");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.EquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttenuationCoefficient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DTT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Frequency")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Passport", "TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity.Passport#Passport", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("DateOfIssueOfPassport")
                                .HasColumnType("date")
                                .HasColumnName("DateOfIssuePassport");

                            b1.Property<string>("DivisionCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("DivisionCode");

                            b1.Property<string>("IssuedBy")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("IssuedBy");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("Number");

                            b1.Property<string>("ResidenceAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResidenceAddress");

                            b1.Property<string>("ResidentialAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResidentialAddress");

                            b1.Property<int>("Series")
                                .HasColumnType("integer")
                                .HasColumnName("Series");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ContractType")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("DateOfContractConclusion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfTerminationOfTheContract")
                        .HasColumnType("date");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<long>("PersonalBill")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasonForTerminationOfContract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubscriberNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOfEquipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a580a05a-4cfa-4457-8b8a-e2cffc368cf0"),
                            ContractNumber = "50-785493417-KOLOMNA-11-2018",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2018, 11, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493417L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493417-KOLOMNA",
                            TypeOfEquipment = "Маршрутизатор"
                        },
                        new
                        {
                            Id = new Guid("ac091089-8c71-4e96-b79e-c60517561527"),
                            ContractNumber = "50-785493418-KOLOMNA-12-2019",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2019, 12, 10),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493418L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493418-KOLOMNA",
                            TypeOfEquipment = "Маршрутизатор"
                        },
                        new
                        {
                            Id = new Guid("8c9a031b-6262-4e07-90c0-0d765f06767d"),
                            ContractNumber = "50-785493419-KOLOMNA-11-2014",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2014, 11, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493419L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493419-KOLOMNA",
                            TypeOfEquipment = "Коммутатор"
                        },
                        new
                        {
                            Id = new Guid("2372b9cf-6ed4-4690-a955-0d05c71f44d7"),
                            ContractNumber = "50-785493420-KOLOMNA-11-2014",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2014, 11, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493420L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493420-KOLOMNA",
                            TypeOfEquipment = "Сервер"
                        },
                        new
                        {
                            Id = new Guid("589e669e-0b4c-4405-8213-9a259dae84fd"),
                            ContractNumber = "50-785493421-KOLOMNA-06-2015",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2015, 6, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2023, 5, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493421L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493421-KOLOMNA",
                            TypeOfEquipment = "Шлюз"
                        },
                        new
                        {
                            Id = new Guid("c8644cc5-55ac-4d5a-a0db-107ab0174ae5"),
                            ContractNumber = "50-785493422-KOLOMNA-07-2013",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2013, 7, 5),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493422L,
                            ReasonForTerminationOfContract = "Не указана",
                            Services = "Интернет",
                            SubscriberNumber = "50-785493422-KOLOMNA",
                            TypeOfEquipment = "Модем"
                        },
                        new
                        {
                            Id = new Guid("c22ba44a-ef06-4ff2-b5dd-8a1d3207c964"),
                            ContractNumber = "50-785493423-KOLOMNA-03-2010",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2010, 3, 27),
                            DateOfTerminationOfTheContract = new DateOnly(2022, 11, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493423L,
                            ReasonForTerminationOfContract = "Финансовые трудности",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493423-KOLOMNA",
                            TypeOfEquipment = "Телефон"
                        },
                        new
                        {
                            Id = new Guid("dce8f11b-fdb8-4c9e-ad8c-f4b69d975c4d"),
                            ContractNumber = "50-785493424-KOLOMNA-01-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 1, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2024, 1, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Нарушение условий договора",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Ноутбук"
                        },
                        new
                        {
                            Id = new Guid("401eb0cc-22f1-49a4-9a00-053b75a7f7fa"),
                            ContractNumber = "50-785493424-KOLOMNA-01-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 1, 12),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Мобильная связь",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Планшет"
                        },
                        new
                        {
                            Id = new Guid("7c5fa9d4-00d9-4dc1-a5d0-c64c03155203"),
                            ContractNumber = "50-785493424-KOLOMNA-05-2020",
                            ContractType = false,
                            DateOfContractConclusion = new DateOnly(2020, 5, 11),
                            DateOfTerminationOfTheContract = new DateOnly(2044, 6, 12),
                            PersonId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PersonalBill = 785493424L,
                            ReasonForTerminationOfContract = "Истечение срока договора",
                            Services = "Телевидение",
                            SubscriberNumber = "50-785493424-KOLOMNA",
                            TypeOfEquipment = "Ноутбук"
                        });
                });

            modelBuilder.Entity("EmployeePositionEntityEventEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeePositionEntity", null)
                        .WithMany()
                        .HasForeignKey("employeePositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeePositionEntityRoleEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeePositionEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeePositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.CRM_requestEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", "Service")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", "ServiceProvided")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceProvidedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", "ServiceType")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", "Subscriber")
                        .WithMany("CRM_RequestEntities")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServiceProvided");

                    b.Navigation("ServiceType");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeeEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeePositionEntity", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RolePermissionEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", "Address")
                        .WithMany("BaseStations")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", b =>
                {
                    b.HasOne("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", "Subscriber")
                        .WithOne("Person")
                        .HasForeignKey("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.PersonEntity", "SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceProvidedEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.CRM.ServiceTypeEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EMPLOYEE.EmployeePositionEntity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.EQUIPMENT.BaseStationAddressEntity", b =>
                {
                    b.Navigation("BaseStations");
                });

            modelBuilder.Entity("TNS.PERSISTENCE.ENTITIES.SUBSCRIBER.SubscriberEntity", b =>
                {
                    b.Navigation("CRM_RequestEntities");

                    b.Navigation("Person")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
